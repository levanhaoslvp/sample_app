 require 'rails_helper'
 
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.

  let(:current_user){ create(:user)}

  let(:invalid_post_content) do
    {
      'title' => 'my tittle',
      'content' => ''
    }
  end

  let(:invalid_post_title) do
    {
      'title' => '',
      'content' => 'my content'
    }
  end

  let(:valid_post_user) do 
    {
      'title' => 'my tittle',
      'content' => 'abc xyz'
    }
  end

  let(:test_post){ create(:post, user: current_user)}

  let(:comment_post){ create(:comment, post_id: test_post.id, user_id: current_user.id)}

  before {sign_in current_user}

  describe 'no loggin' do
    before {sign_out current_user}

    it 'redirect to sign-in when GET /index' do 
      get posts_url
      expect(response).to redirect_to(new_user_session_url)
    end

    it 'redirect to sign-in when GET /show' do 
      get post_url(test_post)
      expect(response).to redirect_to(new_user_session_url)
    end

    it 'redirect to sign-in when GET /new' do 
      get new_post_url
      expect(response).to redirect_to(new_user_session_url)
    end

    it 'redirect to sign-in when GET /edit' do 
      get edit_post_url(test_post)
      expect(response).to redirect_to(new_user_session_url)
    end

    it 'redirect to sign-in when POST /create' do 
      valid_post_user['user_id'] = current_user.id
      post posts_url, params: { post: valid_post_user}
      expect(response).to redirect_to(new_user_session_url)
    end
  end

  describe ' logged ' do
    it 'show all post (GET/index)' do
      comment = test_post.comments
      get posts_url
      expect(response).to be_successful
    end

    it "show detail post (GET /show)" do
      comment = test_post.comments
      get post_url(test_post)
      expect(response).to be_successful
    end

    it "renders a successful response (GET/new)" do
      get new_post_url
      expect(response).to be_successful
    end

    it "render a successful response (GET /edit)" do
      get edit_post_url(test_post)
      expect(response).to be_successful
    end

    context "with valid parameters (POST/create)" do
      it "creates a new Post" do
        expect do 
          valid_post_user['user_id'] = current_user.id
          post posts_url, params: { post: valid_post_user }
        end.to change(Post, :count).by(1)
      end

      it "redirects to the created post" do
        valid_post_user['user_id'] = current_user.id
        post posts_url, params: { post: valid_post_user}
        expect(response).to redirect_to(post_url(Post.last))
      end
    end

    context "with invalid parameters (POST/create)" do
      it "does not create a new Post - no content" do
        invalid_post_content['user_id'] = current_user.id
        expect {
          post posts_url, params: { post: invalid_post_content}
        }.to change(Post, :count).by(0)
      end

      it "does not create a new Post - no title" do
        invalid_post_title['user_id'] = current_user.id
        expect {
          post posts_url, params: { post: invalid_post_title}
        }.to change(Post, :count).by(0)
      end

      it " ridirect to new post - no content" do
        invalid_post_content['user_id'] = current_user.id
        post posts_url, params: { post: invalid_post_content }
        expect(response).to render_template(:new)
      end

      it " ridirect to new post - no title" do
        invalid_post_title['user_id'] = current_user.id
        post posts_url, params: { post: invalid_post_title }
        expect(response).to render_template(:new)
      end
    end

    context "with valid parameters (PATCH /update)" do
      it "redirects to the post" do
        patch post_url(test_post), params: { post: valid_post_user }
        test_post.reload
        expect(response).to redirect_to(post_url(test_post))
      end
    end

    context "with invalid parameters (PATCH /update)" do
      it "renders a successful response" do
        get posts_url
        patch post_url(test_post), params: { post: invalid_post_content}
        test_post.reload
        expect(response.status).to render_template(:edit)
      end
    end

    context "when delete a post (DELETE/destroy)" do
      it "remove a comment" do
        post = create(:post, user: current_user)
        expect {
          delete post_url(post)
        }.to change(Post, :count).by(-1)
      end
  
      it "redirects to the posts list" do
        delete post_url(test_post)
        expect(response).to redirect_to(posts_url)
      end
    end
  end
end
