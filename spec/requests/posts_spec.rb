 require 'rails_helper'
 
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.

  let(:invalid_post_content) do
    {
      'title' => 'my tittle',
      'content' => ''
    }
  end

  let(:invalid_post_title) do
    {
      'title' => '',
      'content' => 'my content'
    }
  end

  let(:valid_post) do 
    {
      'title' => 'my tittle',
      'content' => 'abc xyz'
    }
  end

  let(:new_post) do
    {
      :title => 'my tittle',
      :content =>'my content'
    }
  end

  describe 'GET /index' do
    it 'show all post' do
      current_user = create_user
      sign_in current_user
      post = current_user.posts.create! valid_post
      comment = post.comments
      get posts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "show post" do
      current_user = create_user
      sign_in current_user
      post = current_user.posts.create! valid_post
      get post_url(post)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      current_user = create_user
      sign_in current_user
      get new_post_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      current_user = create_user
      sign_in current_user
      post = current_user.posts.create! valid_post
      get edit_post_url(post)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Post" do
        expect do 
          current_user = create_user
          sign_in current_user
          post posts_url, params: { post: valid_post }
        end.to change(Post, :count).by(1)
      end

      it "redirects to the created post" do
        current_user = create_user
        sign_in current_user
        post posts_url, params: { post: valid_post}
        expect(response).to redirect_to(post_url(Post.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Post no content" do
        current_user = create_user
        sign_in current_user
        expect {
          post posts_url, params: { post: invalid_post_content}
        }.to change(Post, :count).by(0)
      end

      it "does not create a new Post no title" do
        current_user = create_user
        sign_in current_user
        expect {
          post posts_url, params: { post: invalid_post_title}
        }.to change(Post, :count).by(0)
      end

      it " ridirect to new post (i.e. to display the 'new' template)" do
        current_user = create_user
        sign_in current_user
        expect {
          post posts_url, params: { post: invalid_post_content}
        }.to change(Post, :count).by(0)
        post posts_url, params: { post: invalid_post_content }
        expect(response).to render_template(:new)
      end

      it " ridirect to new post (i.e. to display the 'new' template)" do
        current_user = create_user
        sign_in current_user
        expect {
          post posts_url, params: { post: invalid_post_content}
        }.to change(Post, :count).by(0)
        post posts_url, params: { post: invalid_post_content }
        expect(response).to render_template(:new)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "no sign-in no pass" do
        current_user = create_user
        post = current_user.posts.create! valid_post
        patch post_url(post), params: { post: new_post }
        post.reload
        expect(response).to redirect_to(new_user_session_url)
      end

      it "redirects to the post" do
        current_user = create_user
        sign_in current_user
        post = current_user.posts.create! valid_post
        patch post_url(post), params: { post: new_post }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end
    end

    context "with invalid parameters" do
      it "no sign-in no pass" do
        current_user = create_user
        get posts_url
        post = current_user.posts.create! valid_post
        patch post_url(post), params: { post: invalid_post_content}
        post.reload
        expect(response).to redirect_to(new_user_session_url)
      end

      it "renders a successful response (i.e. to display the 'edit' template)" do
        current_user = create_user
        sign_in current_user
        get posts_url
        post = current_user.posts.create! valid_post
        patch post_url(post), params: { post: invalid_post_content}
        post.reload
        expect(response.status).to render_template(:edit)
      end
    end
  end

  describe "DELETE /destroy" do
    it "no sign-in no pass" do
      current_user = create_user
      get posts_url
      post = current_user.posts.create! valid_post
      delete post_url(post)
      expect(response).to redirect_to(new_user_session_url)
    end

    it "destroys the requested post" do
      current_user = create_user
      sign_in current_user
      post = current_user.posts.create! valid_post
      expect {
        delete post_url(post)
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      current_user = create_user
      sign_in current_user
      post = current_user.posts.create! valid_post
      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end
  end
end
